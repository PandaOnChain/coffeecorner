venv, pip install django pillow python-dotenv
django-admin startproject coffeecorner

cd coffeecorner
django-admin startapp shop

settings    | INSTALLED_APPS.append('shop.apps.ShopConfig')
create models

python manage.py makemigrations
pythom manage.py migrate

register models in the admin panel
admin   | from .models import Category, Product ...

python manage.py createsuperuser



sudo apt-get install iptables-persistent
sudo iptables -I INPUT 5 -p tcp --dport 8000 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
sudo netfilter-persistent save

sudo apt install gunicorn
gunicorn --bind 0.0.0.0:8000 coffeecorner.wsgi

sudo mkdir /var/log/gunicorn
sudo nano /etc/systemd/system/gunicorn.socket
# ---------------------------------------------------------------------------
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
---------------------------------------------------------------------



sudo nano /etc/systemd/system/gunicorn.service
# ---------------------------------------------------------------------------
[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=ubuntu
Group=www-data
WorkingDirectory=/home/ubuntu/coco/coffeecorner/coffeecorner
ExecStart=/home/ubuntu/coco/env/bin/gunicorn --access-logfile - --workers 3 --bind unix:/run/gunicorn.sock coffeecorner.wsgi:application

[Install]
WantedBy=multi-user.target
# ---------------------------------------------------------------------------

# start the service
sudo systemctl start gunicorn.socket
sudo systemctl enable gunicorn.socket

# check status
sudo systemctl status gunicorn.socket
sudo systemctl status gunicorn

# restart if you change any python file
sudo systemctl daemon-reload
sudo systemctl restart gunicorn

sudo apt-get install nginx
sudo nano /etc/nginx/sites-available/coffeecorner

server {
    listen 80;
    server_name 130.61.126.18;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/ubuntu/coco/coffeecorner/coffeecorner;
    }
    location /media/ {
        root /home/ubuntu/coco/coffeecorner/coffeecorner;
    }
    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}

sudo gpasswd -a www-data ubuntu
sudo -u www-data stat /home/ubuntu/coco/coffeecorner/coffeecorner/static

sudo ln -s /etc/nginx/sites-available/coffeecorner /etc/nginx/sites-enabled

sudo nginx -t

sudo iptables -I INPUT 5 -p tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
sudo netfilter-persistent save
sudo systemctl restart nginx

#########NGINX LOGS
tail -f /var/log/nginx/error.log


.venv/Lib/site-packages/django/contrib/admin/sites.py
site_title = gettext_lazy("CoffeCorner site admin")
site_header = gettext_lazy("CoffeeCorner administration")

install docker

sudo apt install -y ca-certificates curl gnupg lsb-release
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update -y
                                                                        sudo apt install docker.io
https://docs.docker.com/desktop/install/ubuntu/                         $ sudo apt-get purge containerd.io docker-ce
sudo apt install ./docker-desktop-<version>-<arch>.deb                  $ rm -rf /var/lib/containerd
systemctl --user start docker-desktop                                   [reboot]
docker pull redis                                                       $ sudo apt-get install containerd.io docker-ce

docker run -it --rm --name redis -p 6379:6379 redis     | docker run -d --rm --name redis -p 6379:6379 redis
docker exec -it redis sh

sudo apt-get install redis-server
pip install redis


>>> from shop.recommender import Recommender
>>> r = Recommender()
>>> r.products_bought([black_tea, red_tea])
>>> r.products_bought([black_tea, green_tea])
>>> r.products_bought([red_tea, black_tea, tea_powder])

>>> r.suggest_products_for([black_tea])
